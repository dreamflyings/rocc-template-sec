#include "rocc.h"
#include "mmu.h"
#include "extension.h"
#include "aes.h"

//Implement AES here

unsigned char sbox[256] =   {
//0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, //0
0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, //1
0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, //2
0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, //3
0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, //4
0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, //5
0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, //6
0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, //7
0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, //8
0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, //9
0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, //A
0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, //B
0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, //C
0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, //D
0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, //E
0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 }; //F
 
unsigned char rsbox[256] = {
0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, //0
0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, //1
0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, //2
0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, //3
0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, //4
0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, //5
0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, //6
0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, //7
0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, //8
0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, //9
0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, //A
0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, //B
0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, //C
0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, //D
0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, //E
0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d }; //F

unsigned char mc_box[4][4] = {
	{0x02, 0x03, 0x01, 0x01},
	{0x01, 0x02, 0x03, 0x01},
	{0x01, 0x01, 0x02, 0x03},
	{0x03, 0x01, 0x01, 0x02}
};

unsigned char rmc_box[4][4] = {
	{0x0E, 0x0B, 0x0D, 0x09},
	{0x09, 0x0E, 0x0B, 0x0D},
	{0x0D, 0x09, 0x0E, 0x0B},
	{0x0B, 0x0D, 0x09, 0x0E}
};

// unsigned char rcon[10] = {0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,0x36};
unsigned char rcon[30] = {0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,0x36,0x6C,0xD8,0xAB,0x4D,0x9A,0x2F,0x5E,0xBC,0x63,0xC6,0x97,0x35,0x6A,0xD4,0xB3,0x7D,0xFA,0xEF,0xC5};

// The round constant word array, Rcon[i], contains the values given by
// x to th e power (i-1) being powers of x (x is denoted as {02}) in the field GF(2^8)
// Note that i starts at 1, not 0).
// int rcon[255] = {

// 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
// 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
// 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
// 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
// 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
// 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
// 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
// 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
// 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
// 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
// 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
// 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
// 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
// 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
// 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
// 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb  };


void substitute_bytes(unsigned char state[4][4], bool inverse)
{
	/* Replace every byte of the input by the byte at that place* in the non-linear S-box*/
	int c, r;
	unsigned char * substitute_box = new unsigned char[256];
	if(inverse)
		memcpy(substitute_box, rsbox, sizeof(substitute_box));
	else
		memcpy(substitute_box, sbox, sizeof(substitute_box));
	for(r = 0; r < 4; r++)
	{
		for(c = 0; c < 4; c++)
		{
			state[r][c] = substitute_box[state[r][c]];
		}
	}
}

unsigned char * shift_row(unsigned char row[4], signed int delta, bool inverse)
//shifts single row left (inverse=false) or right (inverse=true)
{
	unsigned char * temp = new unsigned char[4];
	if(delta == 0)
		return row;
	if(!inverse)
		delta *= -1; // inverse = shift right (aka add)

	for(int c=0;c<4;c++)
	{
		int new_loc = (c + delta) % 4;
		if(new_loc < 0)
			new_loc += 4;
		temp[new_loc] = row[c];
	}

	return temp;
}

void shift_rows(unsigned char state[4][4], bool inverse)
{
        signed int r;
        for(r = 1; r < 4; r++) // row 0 does not shift.
        {
                *state[r] = *shift_row(state[r], r, inverse);
        }
}


unsigned char mul_column(unsigned char col[4], int row, bool inverse)
{
	unsigned char * temp = new unsigned char[4];
	unsigned char mult_col_box[4][4] = {{0}};
	if(inverse)
		memcpy(mult_col_box, rmc_box, sizeof(mult_col_box));
	else
		memcpy(mult_col_box, mc_box, sizeof(mult_col_box));
	unsigned char res = (
		(col[0] * mult_col_box[row][0])
		+ (col[1] * mult_col_box[row][1])
		+ (col[2] * mult_col_box[row][2])
		+ (col[3] * mult_col_box[row][3]));
	if((res & 0x80) == 0)
	{
		res = res << 1;
		res = res ^ 0x00;
	}
	else
	{
		res = res << 1;
		res = res ^ 0x1b;
	}
	return res;
}

void mix_columns(unsigned char state[4][4], bool inverse)
{
	unsigned char ** temp = new unsigned char[4][4];
	int r, c;
	for(c = 0; c < 4; c++)
	{
		unsigned char col[4] = {state[0][c], state[1][c], state[2][c], state[3][c]};
		for(r = 0; r < 4; r++)
		{
			temp[r][c] = mul_column(col, r, inverse);
		}
	}
	*state = *temp;
}

void add_round_key(unsigned char state[4][4], unsigned char * round_key, int round)
{
	/* XOR corresponding text input and round key input bytes*/
	int i, j;
	for(i = 0;i<4;i++)
	{
		for(j = 0; j < 4; j++)
		{
			state[i][j] ^= round_key[(round * 4 * 4) + (i * 4) + j];
		}
	}
}

unsigned char * rotate_word(unsigned char word[4])
{
	unsigned char temp=word[0];
	word[0] = word[1];
	word[1] = word[2];
	word[2] = word[3];
	word[3] = temp;
	return word;
}

unsigned char * sub_word(unsigned char word[4])
{
	unsigned char * temp = new unsigned char[4];
	temp[0] = sbox[word[0]];
	temp[1] = sbox[word[1]];
	temp[2] = sbox[word[2]];
	temp[3] = sbox[word[3]];
	return temp;
}

void key_expansion(unsigned char key[32], unsigned char *round_key, int round_number)
{
	int i,j;
	unsigned char * temp = new unsigned char[4];
	for(i=0;i<4;i++)
	{
		round_key[(i * 4) + 0] = key[(i * 4) + 0];
		round_key[(i * 4) + 1] = key[(i * 4) + 1];
		round_key[(i * 4) + 2] = key[(i * 4) + 2];
		round_key[(i * 4) + 3] = key[(i * 4) + 3];
	}

	for(i=4;i<(4*round_number);i++)
	{
		temp[0] = round_key[((i-1) * 4) + 0];
		temp[1] = round_key[((i-1) * 4) + 1];
		temp[2] = round_key[((i-1) * 4) + 2];
		temp[3] = round_key[((i-1) * 4) + 3];

		if(i % 4 == 0)
		{
			temp = sub_word(rotate_word(temp)) ^ rcon[i/4];
		}

		round_key[(i * 4) + 0] = round_key[((i - 4) * 4) + 0] ^ temp[0];
		round_key[(i * 4) + 1] = round_key[((i - 4) * 4) + 1] ^ temp[1];
		round_key[(i * 4) + 2] = round_key[((i - 4) * 4) + 2] ^ temp[2];
		round_key[(i * 4) + 3] = round_key[((i - 4) * 4) + 3] ^ temp[3];
	}
}


void encrypt(unsigned char cipher_key[32], unsigned char * plaintext, unsigned char * enc_buf)
{
	int round_number;
	bool inverse = false;
	unsigned char** state = new unsigned char*[rowCount];
	for(int i = 0; i < 4; ++i)
    		state[i] = new unsigned char[4];
	
	//*state = *plaintext;
	unsigned char *round_key;
	/* begin with a key addition*/
	key_expansion(cipher_key, round_key, 0);
	add_round_key(state, round_key[0], 0);
	/* ROUNDS-1 ordinary rounds*/
	for(round_number = 0; round_number < 10; round_number++)
	{
		substitute_bytes(state, inverse);
		shift_rows(state, inverse);
		mix_columns(state, inverse);
		add_round_key(inverse, round_key[round_number], round_number);
	}
	/* Last round is special: there is no mix_columns*/
	substitute_bytes(state, inverse);
	shift_rows(state, inverse);
	add_round_key(state, round_key[round_number]);
}

void decrypt(unsigned char *cipher_key, unsigned char *ciphertext, unsigned char * enc_buf)
{
	int round;
	bool inverse = true;
	/* To decrypt:
	 *   apply the inverse operations of the encrypt routine,
	 *   in opposite order
	 *
	 * - AddRoundKey is equal to its inverse)
	 * - the inverse of SubBytes with table S is
	 *             SubBytes with the inverse table of S)
	 * - the inverse of Shiftrows is Shiftrows over
	 *       a suitable distance)*/

	/* First the special round:
	 *   without InvMixColumns
	 *   with extra AddRoundKey
	*/
	unsigned char** state = new unsigned char*[rowCount];
        for(int i = 0; i < 4; ++i)
                state[i] = new unsigned char[4];

	unsigned char *round_key;
        /* begin with a key addition*/
        key_expansion(cipher_key, round_key, 0);
	
	add_round_key(state, round_key, 10);
	shift_rows(state, inverse);
	/* ROUNDS-1 ordinary rounds*/
	for(round = 9;round > 0; round--)
	{
		add_round_key(state, round_key, round);
		mix_columns(state, inverse);
		substitute_bytes(state, inverse);
		shift_rows(state, inverse);
	}

	/* End with the extra key addition*/
	add_round_key(state, round_key[0], 0);
}

int main()
{
	unsigned char pt[] = "Hello !";
	unsigned char * plaintext = pt;
	 unsigned char enc_buf[128];
    // unsigned char plaintext[1][32] = {
	   //  {0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51}
    // };
    unsigned char ciphertext[1][32] = {
	    {0x60,0x1e,0xc3,0x13,0x77,0x57,0x89,0xa5,0xb7,0xa7,0xf5,0x04,0xbb,0xf3,0xd2,0x28,0xf4,0x43,0xe3,0xca,0x4d,0x62,0xb5,0x9a,0xca,0x84,0xe9,0x90,0xca,0xca,0xf5,0xc5}
    };
    unsigned char iv[1][16] = {
	    {0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff},
    };
    unsigned char key[1][32] = {
	    {0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4}
    };

    encrypt(key[1], plaintext, enc_buf);
    printf("%s", enc_buf);
    
    return 0;
}
